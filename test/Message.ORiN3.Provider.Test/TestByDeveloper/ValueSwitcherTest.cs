using Design.ORiN3.Provider.V1.AutoGenerated;
using Message.ORiN3.Provider.Test.Mock;
using Message.ORiN3.Provider.V1.AutoGenerated;
using Message.ORiN3.Provider.V1.Branch.Switcher;
using Message.ORiN3.Provider.V1.Factory;
using System;
using Xunit;

namespace Message.ORiN3.Provider.Test.TestByDeveloper
{
    public class ValueSwitcherTest
    {
        public static TheoryData<object, ORiN3ValueType, bool> TestData => new()
        {
            { true, ORiN3ValueType.Orin3Bool, false },
            { (bool[])[true, false], ORiN3ValueType.Orin3BoolArray, false },
            { (bool?[])[true, null], ORiN3ValueType.Orin3NullableBoolArray, false },
            { (sbyte)1, ORiN3ValueType.Orin3Int8, false },
            { (sbyte[])[1, 2], ORiN3ValueType.Orin3Int8Array, false },
            { (sbyte?[])[1, null], ORiN3ValueType.Orin3NullableInt8Array, false },
            { (short)1, ORiN3ValueType.Orin3Int16, false },
            { (short[])[1, 2], ORiN3ValueType.Orin3Int16Array, false },
            { (short?[])[1, null], ORiN3ValueType.Orin3NullableInt16Array, false },
            { 1, ORiN3ValueType.Orin3Int32, false },
            { (int[])[1, 2], ORiN3ValueType.Orin3Int32Array, false },
            { (int?[])[1, null], ORiN3ValueType.Orin3NullableInt32Array, false },
            { (long)1, ORiN3ValueType.Orin3Int64, false },
            { (long[])[1, 2], ORiN3ValueType.Orin3Int64Array, false },
            { (long?[])[1, null], ORiN3ValueType.Orin3NullableInt64Array, false },
            { (byte)1, ORiN3ValueType.Orin3Uint8, false },
            { (byte[])[1, 2], ORiN3ValueType.Orin3Uint8Array, false },
            { (byte?[])[1, null], ORiN3ValueType.Orin3NullableUint8Array, false },
            { (ushort)1, ORiN3ValueType.Orin3Uint16, false },
            { (ushort[])[1, 2], ORiN3ValueType.Orin3Uint16Array, false },
            { (ushort?[])[1, null], ORiN3ValueType.Orin3NullableUint16Array, false },
            { (uint)1, ORiN3ValueType.Orin3Uint32, false },
            { (uint[])[1, 2], ORiN3ValueType.Orin3Uint32Array, false },
            { (uint?[])[1, null], ORiN3ValueType.Orin3NullableUint32Array, false },
            { (ulong)1, ORiN3ValueType.Orin3Uint64, false },
            { (ulong[])[1, 2], ORiN3ValueType.Orin3Uint64Array, false },
            { (ulong?[])[1, null], ORiN3ValueType.Orin3NullableUint64Array, false },
            { (float)1, ORiN3ValueType.Orin3Float, false },
            { (float[])[1, 2], ORiN3ValueType.Orin3FloatArray, false },
            { (float?[])[1, null], ORiN3ValueType.Orin3NullableFloatArray, false },
            { (double)1, ORiN3ValueType.Orin3Double, false },
            { (double[])[1, 2], ORiN3ValueType.Orin3DoubleArray, false },
            { (double?[])[1, null], ORiN3ValueType.Orin3NullableDoubleArray, false },
            { "aaa", ORiN3ValueType.Orin3String, false },
            { (string[])["aaa", "bbb"], ORiN3ValueType.Orin3StringArray, false },
            { DateTime.Now, ORiN3ValueType.Orin3Datetime, false },
            { (DateTime[])[DateTime.Now, DateTime.Now], ORiN3ValueType.Orin3DatetimeArray, false },
            { (DateTime?[])[DateTime.Now, null], ORiN3ValueType.Orin3NullableDatetimeArray, false },
            { (object[])[1, "aaa"], ORiN3ValueType.Orin3Object, false },
            { null, ORiN3ValueType.Orin3NullableBool, true },
        };

        [Theory]
        [Trait(nameof(ValueSwitcher), "Execute")]
        [MemberData(nameof(TestData))]
        public void Test01(object value, ORiN3ValueType expected, bool isNull)
        {
            var mock = new ValueBranchMock();
            ValueSwitcher.Execute(value, mock);
            Assert.Single(mock.History);
            Assert.Equal(expected, mock.History[0]);
            Assert.Equal(isNull, mock.IsNull);
        }

        [Theory]
        [Trait(nameof(ValueSwitcher), "Execute")]
        [MemberData(nameof(TestData))]
        public void Test02(object value, ORiN3ValueType expected, bool isNull)
        {
            var mock = new ValueBranchMock();
            var orin3Value = !isNull ? ORiN3ValueFactory.Create((dynamic)value) : new ORiN3Value { Type = ORiN3ValueType.Orin3NullableBool, NullableBool = new() { IsNull = true, } };
            ValueSwitcher.Execute(orin3Value, mock);
            Assert.Single(mock.History);
            Assert.Equal(expected, mock.History[0]);
            Assert.Equal(isNull, mock.IsNull);
        }
    }
}
