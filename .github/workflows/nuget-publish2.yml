name: Publish NuGet Packages

on:
  workflow_dispatch:
    inputs:
      prereleaseenabled:
        required: true
        type: choice
        options:
          - enabled
          - disabled
        default: 'enabled'
      prerelease:
        description: 'PreRelease identifier (e.g. rc, alpha, beta)'
        required: false
        type: string
        default: 'rc'
      configuration:
        description: 'configuration'
        required: true
        type: choice
        options:
          - Release
          - Debug
        default: 'Release'

env:
  VERSION_FILE: ${{ github.workspace }}/SolutionDefines.ProjectVersion.targets

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Parameters
        run: |
          echo "prereleaseenabled: ${{ github.event.inputs.prereleaseenabled }}"
          echo "prerelease: ${{ github.event.inputs.prerelease }}"
          echo "configuration: ${{ github.event.inputs.configuration }}"
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      - name: Restore dependencies
        run: dotnet restore
      - name: Update Version
        run: |
          PROJECT_VERSION=$(grep -oP '(?<=<ProjectVersion>).*(?=</ProjectVersion>)' ${{ env.VERSION_FILE }})
          NUGET_VERSION=$(grep -oP '(?<=<NugetPackageVersion>).*(?=</NugetPackageVersion>)' ${{ env.VERSION_FILE }})
          echo "PROJECT_VERSION: $PROJECT_VERSION"
          echo "NUGET_VERSION: $NUGET_VERSION"

          IFS='.' read -r MAJOR MINOR BUILD <<< "${NUGET_VERSION%-*}"
          PRERELEASE="${NUGET_VERSION#*-}"
          if [ "$PRERELEASE" = "$NUGET_VERSION" ]; then
            PRERELEASE_IDENTIFIER=""
            PRERELEASE_NUMBER=""
          else
            PRERELEASE_IDENTIFIER=${PRERELEASE%%.*}
            PRERELEASE_NUMBER=$(echo $PRERELEASE | awk -F'.' '{print $NF}')
          fi

          echo "MAJOR: $MAJOR"
          echo "MINOR: $MINOR"
          echo "BUILD: $BUILD"
          echo "PRERELEASE_IDENTIFIER: $PRERELEASE_IDENTIFIER"
          echo "PRERELEASE_NUMBER: $PRERELEASE_NUMBER"

          if [ ${{ github.event.inputs.prereleaseenabled }} = "enabled" ]; then
            echo "# Prerelease version"
            if [ "$PRERELEASE_IDENTIFIER" = "" ]; then
              echo "# set the prerelease number to 0"
              PRERELEASE_NUMBER="0"
            fi
            PRERELEASE_NUMBER=$((PRERELEASE_NUMBER + 1))
            NEW_PROJECT_VERSION="$MAJOR.$MINOR.$BUILD.0"
            NEW_NUGET_VERSION="$MAJOR.$MINOR.$BUILD-${{ github.event.inputs.prerelease }}.$PRERELEASE_NUMBER"
          else
            # Regular version increment
            if [ "$PRERELEASE_IDENTIFIER" = "" ]; then
              # Remove prerelease and increment build
              BUILD=$((BUILD + 1))
            fi
            NEW_PROJECT_VERSION="$MAJOR.$MINOR.$BUILD.0"
            NEW_NUGET_VERSION="$MAJOR.$MINOR.$BUILD"
          fi

          sed -i "s/<ProjectVersion>.*<\/ProjectVersion>/<ProjectVersion>$NEW_PROJECT_VERSION<\/ProjectVersion>/" $VERSION_FILE
          sed -i "s/<NugetPackageVersion>.*<\/NugetPackageVersion>/<NugetPackageVersion>$NEW_NUGET_VERSION<\/NugetPackageVersion>/" $VERSION_FILE

          echo "Updated Project Version: $NEW_PROJECT_VERSION"
          echo "Updated NuGet Version: $NEW_NUGET_VERSION"
      - name: Build
        run: dotnet build --configuration ${{ github.event.inputs.configuration }} --no-restore
      - name: Test
        run: dotnet test --no-build --configuration ${{ github.event.inputs.configuration }} --logger trx --results-directory TestResults
      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: TestResults
        if: always()
      - name: Pack
        run: dotnet pack --configuration ${{ github.event.inputs.configuration }} --no-build --output nupkgs
      - uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: ${{ github.workspace }}

  test:
    needs: build
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: build-output
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      - name: Restore dependencies
        run: dotnet restore
      - name: Test
        run: dotnet test --no-build --configuration ${{ github.event.inputs.configuration }} --logger trx --results-directory TestResults

  publish:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: build-output
      - name: Check if in git repository
        run: |
          if [ ! -d .git ]; then
            echo "Not in a Git repository."
          fi
      - name: Check if VERSION_FILE exists
        run: |
          if [ -f ${{ env.VERSION_FILE }} ]; then
            echo "File exists."
          else
            echo "File does not exist."
          fi
      - name: Commit and push changes
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add ${{ env.VERSION_FILE }}
          git commit -m "Update project version"
          git push
          
