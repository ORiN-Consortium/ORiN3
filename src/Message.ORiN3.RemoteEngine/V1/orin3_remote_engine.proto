syntax = "proto3";

package Message.ORiN3.RemoteEngine;

import "Design.ORiN3.Common/V1/orin3_common_remote_engine.proto";

option csharp_namespace = "Message.ORiN3.RemoteEngine.V1.AutoGenerated";
option ruby_package = "Message::ORiN3::RemoteEngine::V1::AutoGenerated";

service RemoteEngineService {
  rpc WakeupProvider(WakeupProviderRequest) returns (WakeupProviderResponse);
  rpc TerminateProvider(TerminateProviderRequest) returns (TerminateProviderResponse);
  rpc GetRemoteEngineStatus(GetRemoteEngineStatusRequest) returns (GetRemoteEngineStatusResponse);
}

message CommonRequest {
  // Reserved value.
  int32 reserved = 1;
}

// The common response class.
message CommonResponse {
  // The result code.
  Design.ORiN3.Common.RemoteEngine.RemoteEngineResultCode result_code = 1;
  // The detail message of the result.
  string detail = 2;
}

message WakeupProviderRequest {
  CommonRequest common = 1;
  string id = 2;
  string version = 3;
  ProviderCoreStartupArgument provider_startup_argument = 4;
}

message ProviderCoreStartupArgument {
  bool thread_safe_mode = 1;
  repeated ProviderCoreStartupArgumentEndpointInfo provider_core_startup_argument_endpoint_infos = 2;
  int32 log_level = 3;
  TelemetryOption telemetry_option = 4;
  map<string, string> extension = 5;
}

message ProviderCoreStartupArgumentEndpointInfo {
  int32 protocol_type = 1;
  string host = 2;
  int32 port = 3;
  bytes reserved = 4;
}

message TelemetryOption {
  map<string, string> attributes = 1;
  bool use_remote_engine_telemetry_setting = 2;
  repeated TelemetryEndpoint telemetry_endpoints = 3;
}

message TelemetryEndpoint {
  string uri = 1;
  int32 telemetry_type_flag = 2;
  int32 proxy_setting = 3;
  string proxy_uri = 4;
  TelemetryProtocolType protocol_type = 5;
  bytes reserved = 6;
  enum TelemetryProtocolType {
    GRPC = 0;
    HTTP_PROTOBUF = 1;
  }
}

message WakeupProviderResponse {
  CommonResponse common = 1;
  bytes id = 2;
  ProviderInformation provider_information = 3;
}

message ProviderInformation {
  repeated ProviderEndpoint endpoints = 1;
}

message ProviderEndpoint {
  int32 index = 1;
  string ip_address = 2;
  int32 port = 3;
  string uri = 4;
  int32 protocol_type = 5;
}

message TerminateProviderRequest {
  CommonRequest common = 1;
  bytes id = 2;
}

message TerminateProviderResponse {
  CommonResponse common = 1;
}

message GetRemoteEngineStatusRequest {
  CommonRequest common = 1;
}

message GetRemoteEngineStatusResponse {
  CommonResponse common = 1;
  int32 status = 2;
  string host = 3;
  repeated string addresses = 4;
  string version = 5;
  OsPlatform os_platform = 6;
  string os_description = 7;
}

enum OsPlatform {
  UNKNOWN_OS = 0;
  WINDOWS = 1;
  LINUX = 2;
  FREE_BSD = 3;
  OSX = 4;
}
