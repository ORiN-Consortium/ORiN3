using Design.ORiN3.Common.V1;
using Message.ORiN3.Common.V1.AutoGenerated;
using System;

namespace Message.ORiN3.Common.V1.Branch.Switcher;

/// <summary>
/// The class which provides the functions of action determination by type.
/// </summary>
public static class ValueSwitcher
{
    /// <summary>
    /// Execute an action determination by Value.
    /// The action is provided by the branch.
    /// </summary>
    /// <param name="type"></param>
    /// <param name="branch"></param>
    /// <exception cref="ArgumentNullException"></exception>
    public static void Execute(ORiN3Value value, IValueBranch branch)
    {
        _ = branch ?? throw new ArgumentNullException(nameof(branch));

        switch (value.ValueCase)
        {
            case ORiN3Value.ValueOneofCase.Bool:
                branch.CaseOfBool();
                return;
            case ORiN3Value.ValueOneofCase.BoolArray:
                branch.CaseOfBoolArray();
                return;
            case ORiN3Value.ValueOneofCase.NullableBool:
                if (value.NullableBool.IsNull) branch.CaseOfNull();
                else branch.CaseOfBool();
                return;
            case ORiN3Value.ValueOneofCase.NullableBoolArray:
                branch.CaseOfNullableBoolArray();
                return;
            case ORiN3Value.ValueOneofCase.UInt8:
                branch.CaseOfUInt8();
                return;
            case ORiN3Value.ValueOneofCase.UInt8Array:
                branch.CaseOfUInt8Array();
                return;
            case ORiN3Value.ValueOneofCase.NullableUInt8:
                if (value.NullableUInt8.IsNull) branch.CaseOfNull();
                else branch.CaseOfUInt8();
                return;
            case ORiN3Value.ValueOneofCase.NullableUInt8Array:
                branch.CaseOfNullableUInt8Array();
                return;
            case ORiN3Value.ValueOneofCase.UInt16:
                branch.CaseOfUInt16();
                return;
            case ORiN3Value.ValueOneofCase.UInt16Array:
                branch.CaseOfUInt16Array();
                return;
            case ORiN3Value.ValueOneofCase.NullableUInt16:
                if (value.NullableUInt16.IsNull) branch.CaseOfNull();
                else branch.CaseOfUInt16();
                return;
            case ORiN3Value.ValueOneofCase.NullableUInt16Array:
                branch.CaseOfNullableUInt16Array();
                return;
            case ORiN3Value.ValueOneofCase.UInt32:
                branch.CaseOfUInt32();
                return;
            case ORiN3Value.ValueOneofCase.UInt32Array:
                branch.CaseOfUInt32Array();
                return;
            case ORiN3Value.ValueOneofCase.NullableUInt32:
                if (value.NullableUInt32.IsNull) branch.CaseOfNull();
                else branch.CaseOfUInt32();
                return;
            case ORiN3Value.ValueOneofCase.NullableUInt32Array:
                branch.CaseOfNullableUInt32Array();
                return;
            case ORiN3Value.ValueOneofCase.UInt64:
                branch.CaseOfUInt64();
                return;
            case ORiN3Value.ValueOneofCase.UInt64Array:
                branch.CaseOfUInt64Array();
                return;
            case ORiN3Value.ValueOneofCase.NullableUInt64:
                if (value.NullableUInt64.IsNull) branch.CaseOfNull();
                else branch.CaseOfUInt64();
                return;
            case ORiN3Value.ValueOneofCase.NullableUInt64Array:
                branch.CaseOfNullableUInt64Array();
                return;
            case ORiN3Value.ValueOneofCase.Int8:
                branch.CaseOfInt8();
                return;
            case ORiN3Value.ValueOneofCase.Int8Array:
                branch.CaseOfInt8Array();
                return;
            case ORiN3Value.ValueOneofCase.NullableInt8:
                if (value.NullableInt8.IsNull) branch.CaseOfNull();
                else branch.CaseOfInt8();
                return;
            case ORiN3Value.ValueOneofCase.NullableInt8Array:
                branch.CaseOfNullableInt8Array();
                return;
            case ORiN3Value.ValueOneofCase.Int16:
                branch.CaseOfInt16();
                return;
            case ORiN3Value.ValueOneofCase.Int16Array:
                branch.CaseOfInt16Array();
                return;
            case ORiN3Value.ValueOneofCase.NullableInt16:
                if (value.NullableInt16.IsNull) branch.CaseOfNull();
                else branch.CaseOfInt16();
                return;
            case ORiN3Value.ValueOneofCase.NullableInt16Array:
                branch.CaseOfNullableInt16Array();
                return;
            case ORiN3Value.ValueOneofCase.Int32:
                branch.CaseOfInt32();
                return;
            case ORiN3Value.ValueOneofCase.Int32Array:
                branch.CaseOfInt32Array();
                return;
            case ORiN3Value.ValueOneofCase.NullableInt32:
                if (value.NullableInt32.IsNull) branch.CaseOfNull();
                else branch.CaseOfInt32();
                return;
            case ORiN3Value.ValueOneofCase.NullableInt32Array:
                branch.CaseOfNullableInt32Array();
                return;
            case ORiN3Value.ValueOneofCase.Int64:
                branch.CaseOfInt64();
                return;
            case ORiN3Value.ValueOneofCase.Int64Array:
                branch.CaseOfInt64Array();
                return;
            case ORiN3Value.ValueOneofCase.NullableInt64:
                if (value.NullableInt64.IsNull) branch.CaseOfNull();
                else branch.CaseOfInt64();
                return;
            case ORiN3Value.ValueOneofCase.NullableInt64Array:
                branch.CaseOfNullableInt64Array();
                return;
            case ORiN3Value.ValueOneofCase.Float:
                branch.CaseOfFloat();
                return;
            case ORiN3Value.ValueOneofCase.FloatArray:
                branch.CaseOfFloatArray();
                return;
            case ORiN3Value.ValueOneofCase.NullableFloat:
                if (value.NullableFloat.IsNull) branch.CaseOfNull();
                else branch.CaseOfFloat();
                return;
            case ORiN3Value.ValueOneofCase.NullableFloatArray:
                branch.CaseOfNullableFloatArray();
                return;
            case ORiN3Value.ValueOneofCase.Double:
                branch.CaseOfDouble();
                return;
            case ORiN3Value.ValueOneofCase.DoubleArray:
                branch.CaseOfDoubleArray();
                return;
            case ORiN3Value.ValueOneofCase.NullableDouble:
                if (value.NullableDouble.IsNull) branch.CaseOfNull();
                else branch.CaseOfDouble();
                return;
            case ORiN3Value.ValueOneofCase.NullableDoubleArray:
                branch.CaseOfNullableDoubleArray();
                return;
            case ORiN3Value.ValueOneofCase.String:
                branch.CaseOfString();
                return;
            case ORiN3Value.ValueOneofCase.StringArray:
                branch.CaseOfStringArray();
                return;
            case ORiN3Value.ValueOneofCase.DateTime:
                branch.CaseOfDateTime();
                return;
            case ORiN3Value.ValueOneofCase.DateTimeArray:
                branch.CaseOfDateTimeArray();
                return;
            case ORiN3Value.ValueOneofCase.NullableDateTime:
                if (value.NullableDateTime.IsNull) branch.CaseOfNull();
                else branch.CaseOfDateTime();
                return;
            case ORiN3Value.ValueOneofCase.NullableDateTimeArray:
                branch.CaseOfNullableDateTimeArray();
                return;
            case ORiN3Value.ValueOneofCase.Object:
                branch.CaseOfObject();
                return;
            default:
                branch.CaseOfNull();
                return;
        }
    }

    /// <summary>
    /// Execute an action determination by Value.
    /// The action is provided by the branch.
    /// </summary>
    /// <param name="type"></param>
    /// <param name="branch"></param>
    public static void Execute(object? value, IValueBranch branch)
    {
        if (value == null) branch.CaseOfNull();
        else if (value.GetType() == typeof(bool)) branch.CaseOfBool();
        else if (value.GetType() == typeof(sbyte)) branch.CaseOfInt8();
        else if (value.GetType() == typeof(byte)) branch.CaseOfUInt8();
        else if (value.GetType() == typeof(short)) branch.CaseOfInt16();
        else if (value.GetType() == typeof(ushort)) branch.CaseOfUInt16();
        else if (value.GetType() == typeof(int)) branch.CaseOfInt32();
        else if (value.GetType() == typeof(uint)) branch.CaseOfUInt32();
        else if (value.GetType() == typeof(long)) branch.CaseOfInt64();
        else if (value.GetType() == typeof(ulong)) branch.CaseOfUInt64();
        else if (value.GetType() == typeof(float)) branch.CaseOfFloat();
        else if (value.GetType() == typeof(double)) branch.CaseOfDouble();
        else if (value.GetType() == typeof(DateTime)) branch.CaseOfDateTime();
        else if (value.GetType() == typeof(string)) branch.CaseOfString();
        else if (value.GetType() == typeof(bool[])) branch.CaseOfBoolArray();
        else if (value.GetType() == typeof(sbyte[])) branch.CaseOfInt8Array();
        else if (value.GetType() == typeof(byte[])) branch.CaseOfUInt8Array();
        else if (value.GetType() == typeof(short[])) branch.CaseOfInt16Array();
        else if (value.GetType() == typeof(ushort[])) branch.CaseOfUInt16Array();
        else if (value.GetType() == typeof(int[])) branch.CaseOfInt32Array();
        else if (value.GetType() == typeof(uint[])) branch.CaseOfUInt32Array();
        else if (value.GetType() == typeof(long[])) branch.CaseOfInt64Array();
        else if (value.GetType() == typeof(ulong[])) branch.CaseOfUInt64Array();
        else if (value.GetType() == typeof(float[])) branch.CaseOfFloatArray();
        else if (value.GetType() == typeof(double[])) branch.CaseOfDoubleArray();
        else if (value.GetType() == typeof(DateTime[])) branch.CaseOfDateTimeArray();
        else if (value.GetType() == typeof(string[])) branch.CaseOfStringArray();
        else if (value.GetType() == typeof(bool?[])) branch.CaseOfNullableBoolArray();
        else if (value.GetType() == typeof(sbyte?[])) branch.CaseOfNullableInt8Array();
        else if (value.GetType() == typeof(byte?[])) branch.CaseOfNullableUInt8Array();
        else if (value.GetType() == typeof(short?[])) branch.CaseOfNullableInt16Array();
        else if (value.GetType() == typeof(ushort?[])) branch.CaseOfNullableUInt16Array();
        else if (value.GetType() == typeof(int?[])) branch.CaseOfNullableInt32Array();
        else if (value.GetType() == typeof(uint?[])) branch.CaseOfNullableUInt32Array();
        else if (value.GetType() == typeof(long?[])) branch.CaseOfNullableInt64Array();
        else if (value.GetType() == typeof(ulong?[])) branch.CaseOfNullableUInt64Array();
        else if (value.GetType() == typeof(float?[])) branch.CaseOfNullableFloatArray();
        else if (value.GetType() == typeof(double?[])) branch.CaseOfNullableDoubleArray();
        else if (value.GetType() == typeof(DateTime?[])) branch.CaseOfNullableDateTimeArray();
        else branch.CaseOfObject();
    }
}
