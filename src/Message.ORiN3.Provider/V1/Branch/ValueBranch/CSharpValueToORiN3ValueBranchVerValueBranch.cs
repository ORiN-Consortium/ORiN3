using Design.ORiN3.Common.V1;
using Message.ORiN3.Provider.V1.AutoGenerated;
using Message.ORiN3.Provider.V1.Factory;
using System;

namespace Message.ORiN3.Provider.V1.Branch.ValueBranch;

public class CSharpValueToORiN3ValueBranchVerValueBranch : IValueBranch
{
    public object? Source { get; set; }
    public ORiN3Value? Result { get; set; }
    public void CaseOfBool() => Result = ORiN3ValueFactory.Create((bool)Source!);
    public void CaseOfInt8() => Result = ORiN3ValueFactory.Create((sbyte)Source!);
    public void CaseOfUInt8() => Result = ORiN3ValueFactory.Create((byte)Source!);
    public void CaseOfInt16() => Result = ORiN3ValueFactory.Create((short)Source!);
    public void CaseOfUInt16() => Result = ORiN3ValueFactory.Create((ushort)Source!);
    public void CaseOfInt32() => Result = ORiN3ValueFactory.Create((int)Source!);
    public void CaseOfUInt32() => Result = ORiN3ValueFactory.Create((uint)Source!);
    public void CaseOfInt64() => Result = ORiN3ValueFactory.Create((long)Source!);
    public void CaseOfUInt64() => Result = ORiN3ValueFactory.Create((ulong)Source!);
    public void CaseOfFloat() => Result = ORiN3ValueFactory.Create((float)Source!);
    public void CaseOfDouble() => Result = ORiN3ValueFactory.Create((double)Source!);
    public void CaseOfDateTime() => Result = ORiN3ValueFactory.Create((DateTime)Source!);
    public void CaseOfString() => Result = ORiN3ValueFactory.Create((string)Source!);

    public void CaseOfBoolArray() => Result = ORiN3ValueFactory.Create((bool[])Source!);
    public void CaseOfInt8Array() => Result = ORiN3ValueFactory.Create((sbyte[])Source!);
    public void CaseOfUInt8Array() => Result = ORiN3ValueFactory.Create((byte[])Source!);
    public void CaseOfInt16Array() => Result = ORiN3ValueFactory.Create((short[])Source!);
    public void CaseOfUInt16Array() => Result = ORiN3ValueFactory.Create((ushort[])Source!);
    public void CaseOfInt32Array() => Result = ORiN3ValueFactory.Create((int[])Source!);
    public void CaseOfUInt32Array() => Result = ORiN3ValueFactory.Create((uint[])Source!);
    public void CaseOfInt64Array() => Result = ORiN3ValueFactory.Create((long[])Source!);
    public void CaseOfUInt64Array() => Result = ORiN3ValueFactory.Create((ulong[])Source!);
    public void CaseOfFloatArray() => Result = ORiN3ValueFactory.Create((float[])Source!);
    public void CaseOfDoubleArray() => Result = ORiN3ValueFactory.Create((double[])Source!);
    public void CaseOfDateTimeArray() => Result = ORiN3ValueFactory.Create((DateTime[])Source!);
    public void CaseOfStringArray() => Result = ORiN3ValueFactory.Create((string[])Source!);

    public void CaseOfNullableBoolArray() => Result = ORiN3ValueFactory.Create((bool?[])Source!);
    public void CaseOfNullableInt8Array() => Result = ORiN3ValueFactory.Create((sbyte?[])Source!);
    public void CaseOfNullableUInt8Array() => Result = ORiN3ValueFactory.Create((byte?[])Source!);
    public void CaseOfNullableInt16Array() => Result = ORiN3ValueFactory.Create((short?[])Source!);
    public void CaseOfNullableUInt16Array() => Result = ORiN3ValueFactory.Create((ushort?[])Source!);
    public void CaseOfNullableInt32Array() => Result = ORiN3ValueFactory.Create((int?[])Source!);
    public void CaseOfNullableUInt32Array() => Result = ORiN3ValueFactory.Create((uint?[])Source!);
    public void CaseOfNullableInt64Array() => Result = ORiN3ValueFactory.Create((long?[])Source!);
    public void CaseOfNullableUInt64Array() => Result = ORiN3ValueFactory.Create((ulong?[])Source!);
    public void CaseOfNullableFloatArray() => Result = ORiN3ValueFactory.Create((float?[])Source!);
    public void CaseOfNullableDoubleArray() => Result = ORiN3ValueFactory.Create((double?[])Source!);
    public void CaseOfNullableDateTimeArray() => Result = ORiN3ValueFactory.Create((DateTime?[])Source!);

    public void CaseOfNull() => Result = new ORiN3Value { NullableBool = new() { IsNull = true } };
    public void CaseOfObject() => Result = ORiN3ValueFactory.Create(Source!);
}
