using Design.ORiN3.Common.V1;
using Design.ORiN3.Provider.V1.AutoGenerated;
using Message.ORiN3.Provider.V1.AutoGenerated;
using System;
using System.Diagnostics;
using System.Threading;
using System.Threading.Tasks;

namespace Message.ORiN3.Provider.V1.Branch.Switcher;

/// <summary>
/// The class which provides the functions of action determination by type.
/// </summary>
public static class TypeSwitcher
{
    /// <summary>
    /// Execute an action determination by ValueOneofCase.
    /// The action is provided by the branch.
    /// </summary>
    /// <param name="type"></param>
    /// <param name="branch"></param>
    /// <exception cref="ArgumentNullException"></exception>
    /// <exception cref="TypeSwitcherException"></exception>
    [DebuggerStepThrough]
    public static void Execute(ORiN3Value.ValueOneofCase type, IValueTypeBranch branch)
    {
        branch = branch ?? throw new ArgumentNullException(nameof(branch));

        try
        {
            switch (type)
            {
                case ORiN3Value.ValueOneofCase.Bool:
                    branch.CaseOfBool();
                    return;
                case ORiN3Value.ValueOneofCase.BoolArray:
                    branch.CaseOfBoolArray();
                    return;
                case ORiN3Value.ValueOneofCase.NullableBool:
                    branch.CaseOfNullableBool();
                    return;
                case ORiN3Value.ValueOneofCase.NullableBoolArray:
                    branch.CaseOfNullableBoolArray();
                    return;
                case ORiN3Value.ValueOneofCase.Uint8:
                    branch.CaseOfUInt8();
                    return;
                case ORiN3Value.ValueOneofCase.Uint8Array:
                    branch.CaseOfUInt8Array();
                    return;
                case ORiN3Value.ValueOneofCase.NullableUint8:
                    branch.CaseOfNullableUInt8();
                    return;
                case ORiN3Value.ValueOneofCase.NullableUint8Array:
                    branch.CaseOfNullableUInt8Array();
                    return;
                case ORiN3Value.ValueOneofCase.Uint16:
                    branch.CaseOfUInt16();
                    return;
                case ORiN3Value.ValueOneofCase.Uint16Array:
                    branch.CaseOfUInt16Array();
                    return;
                case ORiN3Value.ValueOneofCase.NullableUint16:
                    branch.CaseOfNullableUInt16();
                    return;
                case ORiN3Value.ValueOneofCase.NullableUint16Array:
                    branch.CaseOfNullableUInt16Array();
                    return;
                case ORiN3Value.ValueOneofCase.Uint32:
                    branch.CaseOfUInt32();
                    return;
                case ORiN3Value.ValueOneofCase.Uint32Array:
                    branch.CaseOfUInt32Array();
                    return;
                case ORiN3Value.ValueOneofCase.NullableUint32:
                    branch.CaseOfNullableUInt32();
                    return;
                case ORiN3Value.ValueOneofCase.NullableUint32Array:
                    branch.CaseOfNullableUInt32Array();
                    return;
                case ORiN3Value.ValueOneofCase.Uint64:
                    branch.CaseOfUInt64();
                    return;
                case ORiN3Value.ValueOneofCase.Uint64Array:
                    branch.CaseOfUInt64Array();
                    return;
                case ORiN3Value.ValueOneofCase.NullableUint64:
                    branch.CaseOfNullableUInt64();
                    return;
                case ORiN3Value.ValueOneofCase.NullableUint64Array:
                    branch.CaseOfNullableUInt64Array();
                    return;
                case ORiN3Value.ValueOneofCase.Int8:
                    branch.CaseOfInt8();
                    return;
                case ORiN3Value.ValueOneofCase.Int8Array:
                    branch.CaseOfInt8Array();
                    return;
                case ORiN3Value.ValueOneofCase.NullableInt8:
                    branch.CaseOfNullableInt8();
                    return;
                case ORiN3Value.ValueOneofCase.NullableInt8Array:
                    branch.CaseOfNullableInt8Array();
                    return;
                case ORiN3Value.ValueOneofCase.Int16:
                    branch.CaseOfInt16();
                    return;
                case ORiN3Value.ValueOneofCase.Int16Array:
                    branch.CaseOfInt16Array();
                    return;
                case ORiN3Value.ValueOneofCase.NullableInt16:
                    branch.CaseOfNullableInt16();
                    return;
                case ORiN3Value.ValueOneofCase.NullableInt16Array:
                    branch.CaseOfNullableInt16Array();
                    return;
                case ORiN3Value.ValueOneofCase.Int32:
                    branch.CaseOfInt32();
                    return;
                case ORiN3Value.ValueOneofCase.Int32Array:
                    branch.CaseOfInt32Array();
                    return;
                case ORiN3Value.ValueOneofCase.NullableInt32:
                    branch.CaseOfNullableInt32();
                    return;
                case ORiN3Value.ValueOneofCase.NullableInt32Array:
                    branch.CaseOfNullableInt32Array();
                    return;
                case ORiN3Value.ValueOneofCase.Int64:
                    branch.CaseOfInt64();
                    return;
                case ORiN3Value.ValueOneofCase.Int64Array:
                    branch.CaseOfInt64Array();
                    return;
                case ORiN3Value.ValueOneofCase.NullableInt64:
                    branch.CaseOfNullableInt64();
                    return;
                case ORiN3Value.ValueOneofCase.NullableInt64Array:
                    branch.CaseOfNullableInt64Array();
                    return;
                case ORiN3Value.ValueOneofCase.Float:
                    branch.CaseOfFloat();
                    return;
                case ORiN3Value.ValueOneofCase.FloatArray:
                    branch.CaseOfFloatArray();
                    return;
                case ORiN3Value.ValueOneofCase.NullableFloat:
                    branch.CaseOfNullableFloat();
                    return;
                case ORiN3Value.ValueOneofCase.NullableFloatArray:
                    branch.CaseOfNullableFloatArray();
                    return;
                case ORiN3Value.ValueOneofCase.Double:
                    branch.CaseOfDouble();
                    return;
                case ORiN3Value.ValueOneofCase.DoubleArray:
                    branch.CaseOfDoubleArray();
                    return;
                case ORiN3Value.ValueOneofCase.NullableDouble:
                    branch.CaseOfNullableDouble();
                    return;
                case ORiN3Value.ValueOneofCase.NullableDoubleArray:
                    branch.CaseOfNullableDoubleArray();
                    return;
                case ORiN3Value.ValueOneofCase.String:
                    branch.CaseOfString();
                    return;
                case ORiN3Value.ValueOneofCase.StringArray:
                    branch.CaseOfStringArray();
                    return;
                case ORiN3Value.ValueOneofCase.Datetime:
                    branch.CaseOfDateTime();
                    return;
                case ORiN3Value.ValueOneofCase.DatetimeArray:
                    branch.CaseOfDateTimeArray();
                    return;
                case ORiN3Value.ValueOneofCase.NullableDatetime:
                    branch.CaseOfNullableDateTime();
                    return;
                case ORiN3Value.ValueOneofCase.NullableDatetimeArray:
                    branch.CaseOfNullableDateTimeArray();
                    return;
                case ORiN3Value.ValueOneofCase.Object:
                    branch.CaseOfObject();
                    return;
                default:
                    branch.CaseOfError();
                    return;
            }
        }
        catch (Exception e)
        {
            throw new TypeSwitcherException(type, e);
        }
    }

    /// <summary>
    /// Execute an action determination by type.
    /// The action is provided by the branch.
    /// </summary>
    /// <param name="type"></param>
    /// <param name="branch"></param>
    /// <exception cref="ArgumentNullException"></exception>
    /// <exception cref="TypeSwitcherException"></exception>
    [DebuggerStepThrough]
    public static void Execute(Type type, IValueTypeBranch branch)
    {
        type = type ?? throw new ArgumentNullException(nameof(type));
        branch = branch ?? throw new ArgumentNullException(nameof(branch));

        try
        {
            switch (Type.GetTypeCode(type))
            {
                case TypeCode.Boolean:
                    branch.CaseOfBool();
                    return;
                case TypeCode.Byte:
                    branch.CaseOfUInt8();
                    return;
                case TypeCode.UInt16:
                    branch.CaseOfUInt16();
                    return;
                case TypeCode.UInt32:
                    branch.CaseOfUInt32();
                    return;
                case TypeCode.UInt64:
                    branch.CaseOfUInt64();
                    return;
                case TypeCode.SByte:
                    branch.CaseOfInt8();
                    return;
                case TypeCode.Int16:
                    branch.CaseOfInt16();
                    return;
                case TypeCode.Int32:
                    branch.CaseOfInt32();
                    return;
                case TypeCode.Int64:
                    branch.CaseOfInt64();
                    return;
                case TypeCode.Single:
                    branch.CaseOfFloat();
                    return;
                case TypeCode.Double:
                    branch.CaseOfDouble();
                    return;
                case TypeCode.String:
                    branch.CaseOfString();
                    return;
                case TypeCode.DateTime:
                    branch.CaseOfDateTime();
                    return;
                default:
                    if (type.IsArray)
                    {
                        switch (Type.GetTypeCode(type.GetElementType()))
                        {
                            case TypeCode.Boolean:
                                branch.CaseOfBoolArray();
                                return;
                            case TypeCode.Byte:
                                branch.CaseOfUInt8Array();
                                return;
                            case TypeCode.UInt16:
                                branch.CaseOfUInt16Array();
                                return;
                            case TypeCode.UInt32:
                                branch.CaseOfUInt32Array();
                                return;
                            case TypeCode.UInt64:
                                branch.CaseOfUInt64Array();
                                return;
                            case TypeCode.SByte:
                                branch.CaseOfInt8Array();
                                return;
                            case TypeCode.Int16:
                                branch.CaseOfInt16Array();
                                return;
                            case TypeCode.Int32:
                                branch.CaseOfInt32Array();
                                return;
                            case TypeCode.Int64:
                                branch.CaseOfInt64Array();
                                return;
                            case TypeCode.Single:
                                branch.CaseOfFloatArray();
                                return;
                            case TypeCode.Double:
                                branch.CaseOfDoubleArray();
                                return;
                            case TypeCode.String:
                                branch.CaseOfStringArray();
                                return;
                            case TypeCode.DateTime:
                                branch.CaseOfDateTimeArray();
                                return;
                            case TypeCode.Object:
                                if (type.GetElementType().GenericTypeArguments.Length == 0)
                                {
                                    branch.CaseOfObject();
                                    return;
                                }
                                switch (Type.GetTypeCode(type.GetElementType().GenericTypeArguments[0]))
                                {
                                    case TypeCode.Boolean:
                                        branch.CaseOfNullableBoolArray();
                                        return;
                                    case TypeCode.Byte:
                                        branch.CaseOfNullableUInt8Array();
                                        return;
                                    case TypeCode.UInt16:
                                        branch.CaseOfNullableUInt16Array();
                                        return;
                                    case TypeCode.UInt32:
                                        branch.CaseOfNullableUInt32Array();
                                        return;
                                    case TypeCode.UInt64:
                                        branch.CaseOfNullableUInt64Array();
                                        return;
                                    case TypeCode.SByte:
                                        branch.CaseOfNullableInt8Array();
                                        return;
                                    case TypeCode.Int16:
                                        branch.CaseOfNullableInt16Array();
                                        return;
                                    case TypeCode.Int32:
                                        branch.CaseOfNullableInt32Array();
                                        return;
                                    case TypeCode.Int64:
                                        branch.CaseOfNullableInt64Array();
                                        return;
                                    case TypeCode.Single:
                                        branch.CaseOfNullableFloatArray();
                                        return;
                                    case TypeCode.Double:
                                        branch.CaseOfNullableDoubleArray();
                                        return;
                                    case TypeCode.DateTime:
                                        branch.CaseOfNullableDateTimeArray();
                                        return;
                                }
                                break;
                        }
                    }
                    else if (type.GenericTypeArguments.Length == 1)
                    {
                        switch (Type.GetTypeCode(type.GenericTypeArguments[0]))
                        {
                            case TypeCode.Boolean:
                                branch.CaseOfNullableBool();
                                return;
                            case TypeCode.Byte:
                                branch.CaseOfNullableUInt8();
                                return;
                            case TypeCode.UInt16:
                                branch.CaseOfNullableUInt16();
                                return;
                            case TypeCode.UInt32:
                                branch.CaseOfNullableUInt32();
                                return;
                            case TypeCode.UInt64:
                                branch.CaseOfNullableUInt64();
                                return;
                            case TypeCode.SByte:
                                branch.CaseOfNullableInt8();
                                return;
                            case TypeCode.Int16:
                                branch.CaseOfNullableInt16();
                                return;
                            case TypeCode.Int32:
                                branch.CaseOfNullableInt32();
                                return;
                            case TypeCode.Int64:
                                branch.CaseOfNullableInt64();
                                return;
                            case TypeCode.Single:
                                branch.CaseOfNullableFloat();
                                return;
                            case TypeCode.Double:
                                branch.CaseOfNullableDouble();
                                return;
                            case TypeCode.DateTime:
                                branch.CaseOfNullableDateTime();
                                return;
                        }
                    }
                    else if (type == typeof(object))
                    {
                        branch.CaseOfObject();
                        return;
                    }
                    break;
            }

            branch.CaseOfError();
        }
        catch (Exception e)
        {
            throw new TypeSwitcherException(type, e);
        }
    }

    /// <summary>
    /// Execute an action determination by type.
    /// The action is provided by the branch.
    /// </summary>
    /// <param name="type"></param>
    /// <param name="branch"></param>
    /// <exception cref="ArgumentNullException"></exception>
    /// <exception cref="TypeSwitcherException"></exception>
    [DebuggerStepThrough]
    public static void Execute(ORiN3ValueType type, IValueTypeBranch branch)
    {
        branch = branch ?? throw new ArgumentNullException(nameof(branch));

        try
        {
            switch (type)
            {
                case ORiN3ValueType.Orin3Bool:
                    branch.CaseOfBool();
                    return;
                case ORiN3ValueType.Orin3BoolArray:
                    branch.CaseOfBoolArray();
                    return;
                case ORiN3ValueType.Orin3NullableBool:
                    branch.CaseOfNullableBool();
                    return;
                case ORiN3ValueType.Orin3NullableBoolArray:
                    branch.CaseOfNullableBoolArray();
                    return;
                case ORiN3ValueType.Orin3Uint8:
                    branch.CaseOfUInt8();
                    return;
                case ORiN3ValueType.Orin3Uint8Array:
                    branch.CaseOfUInt8Array();
                    return;
                case ORiN3ValueType.Orin3NullableUint8:
                    branch.CaseOfNullableUInt8();
                    return;
                case ORiN3ValueType.Orin3NullableUint8Array:
                    branch.CaseOfNullableUInt8Array();
                    return;
                case ORiN3ValueType.Orin3Uint16:
                    branch.CaseOfUInt16();
                    return;
                case ORiN3ValueType.Orin3Uint16Array:
                    branch.CaseOfUInt16Array();
                    return;
                case ORiN3ValueType.Orin3NullableUint16:
                    branch.CaseOfNullableUInt16();
                    return;
                case ORiN3ValueType.Orin3NullableUint16Array:
                    branch.CaseOfNullableUInt16Array();
                    return;
                case ORiN3ValueType.Orin3Uint32:
                    branch.CaseOfUInt32();
                    return;
                case ORiN3ValueType.Orin3Uint32Array:
                    branch.CaseOfUInt32Array();
                    return;
                case ORiN3ValueType.Orin3NullableUint32:
                    branch.CaseOfNullableUInt32();
                    return;
                case ORiN3ValueType.Orin3NullableUint32Array:
                    branch.CaseOfNullableUInt32Array();
                    return;
                case ORiN3ValueType.Orin3Uint64:
                    branch.CaseOfUInt64();
                    return;
                case ORiN3ValueType.Orin3Uint64Array:
                    branch.CaseOfUInt64Array();
                    return;
                case ORiN3ValueType.Orin3NullableUint64:
                    branch.CaseOfNullableUInt64();
                    return;
                case ORiN3ValueType.Orin3NullableUint64Array:
                    branch.CaseOfNullableUInt64Array();
                    return;
                case ORiN3ValueType.Orin3Int8:
                    branch.CaseOfInt8();
                    return;
                case ORiN3ValueType.Orin3Int8Array:
                    branch.CaseOfInt8Array();
                    return;
                case ORiN3ValueType.Orin3NullableInt8:
                    branch.CaseOfNullableInt8();
                    return;
                case ORiN3ValueType.Orin3NullableInt8Array:
                    branch.CaseOfNullableInt8Array();
                    return;
                case ORiN3ValueType.Orin3Int16:
                    branch.CaseOfInt16();
                    return;
                case ORiN3ValueType.Orin3Int16Array:
                    branch.CaseOfInt16Array();
                    return;
                case ORiN3ValueType.Orin3NullableInt16:
                    branch.CaseOfNullableInt16();
                    return;
                case ORiN3ValueType.Orin3NullableInt16Array:
                    branch.CaseOfNullableInt16Array();
                    return;
                case ORiN3ValueType.Orin3Int32:
                    branch.CaseOfInt32();
                    return;
                case ORiN3ValueType.Orin3Int32Array:
                    branch.CaseOfInt32Array();
                    return;
                case ORiN3ValueType.Orin3NullableInt32:
                    branch.CaseOfNullableInt32();
                    return;
                case ORiN3ValueType.Orin3NullableInt32Array:
                    branch.CaseOfNullableInt32Array();
                    return;
                case ORiN3ValueType.Orin3Int64:
                    branch.CaseOfInt64();
                    return;
                case ORiN3ValueType.Orin3Int64Array:
                    branch.CaseOfInt64Array();
                    return;
                case ORiN3ValueType.Orin3NullableInt64:
                    branch.CaseOfNullableInt64();
                    return;
                case ORiN3ValueType.Orin3NullableInt64Array:
                    branch.CaseOfNullableInt64Array();
                    return;
                case ORiN3ValueType.Orin3Float:
                    branch.CaseOfFloat();
                    return;
                case ORiN3ValueType.Orin3FloatArray:
                    branch.CaseOfFloatArray();
                    return;
                case ORiN3ValueType.Orin3NullableFloat:
                    branch.CaseOfNullableFloat();
                    return;
                case ORiN3ValueType.Orin3NullableFloatArray:
                    branch.CaseOfNullableFloatArray();
                    return;
                case ORiN3ValueType.Orin3Double:
                    branch.CaseOfDouble();
                    return;
                case ORiN3ValueType.Orin3DoubleArray:
                    branch.CaseOfDoubleArray();
                    return;
                case ORiN3ValueType.Orin3NullableDouble:
                    branch.CaseOfNullableDouble();
                    return;
                case ORiN3ValueType.Orin3NullableDoubleArray:
                    branch.CaseOfNullableDoubleArray();
                    return;
                case ORiN3ValueType.Orin3String:
                    branch.CaseOfString();
                    return;
                case ORiN3ValueType.Orin3StringArray:
                    branch.CaseOfStringArray();
                    return;
                case ORiN3ValueType.Orin3Datetime:
                    branch.CaseOfDateTime();
                    return;
                case ORiN3ValueType.Orin3DatetimeArray:
                    branch.CaseOfDateTimeArray();
                    return;
                case ORiN3ValueType.Orin3NullableDatetime:
                    branch.CaseOfNullableDateTime();
                    return;
                case ORiN3ValueType.Orin3NullableDatetimeArray:
                    branch.CaseOfNullableDateTimeArray();
                    return;
                case ORiN3ValueType.Orin3Object:
                    branch.CaseOfObject();
                    return;
                default:
                    branch.CaseOfError();
                    return;
            }
        }
        catch (Exception e)
        {
            throw new TypeSwitcherException(type, e);
        }
    }

    /// <summary>
    /// Execute an action determination by type.
    /// The action is provided by the branch.
    /// </summary>
    /// <param name="type"></param>
    /// <param name="branch"></param>
    /// <returns></returns>
    /// <exception cref="ArgumentNullException"></exception>
    /// <exception cref="TypeSwitcherException"></exception>
    [DebuggerStepThrough]
    public static Task ExecuteAsync(ORiN3ValueType type, IValueTypeBranchAsync branch, CancellationToken token)
    {
        branch = branch ?? throw new ArgumentNullException(nameof(branch));

        try
        {
            return type switch
            {
                ORiN3ValueType.Orin3Bool => branch.CaseOfBoolAsync(token),
                ORiN3ValueType.Orin3BoolArray => branch.CaseOfBoolArrayAsync(token),
                ORiN3ValueType.Orin3NullableBool => branch.CaseOfNullableBoolAsync(token),
                ORiN3ValueType.Orin3NullableBoolArray => branch.CaseOfNullableBoolArrayAsync(token),
                ORiN3ValueType.Orin3Uint8 => branch.CaseOfUInt8Async(token),
                ORiN3ValueType.Orin3Uint8Array => branch.CaseOfUInt8ArrayAsync(token),
                ORiN3ValueType.Orin3NullableUint8 => branch.CaseOfNullableUInt8Async(token),
                ORiN3ValueType.Orin3NullableUint8Array => branch.CaseOfNullableUInt8ArrayAsync(token),
                ORiN3ValueType.Orin3Uint16 => branch.CaseOfUInt16Async(token),
                ORiN3ValueType.Orin3Uint16Array => branch.CaseOfUInt16ArrayAsync(token),
                ORiN3ValueType.Orin3NullableUint16 => branch.CaseOfNullableUInt16Async(token),
                ORiN3ValueType.Orin3NullableUint16Array => branch.CaseOfNullableUInt16ArrayAsync(token),
                ORiN3ValueType.Orin3Uint32 => branch.CaseOfUInt32Async(token),
                ORiN3ValueType.Orin3Uint32Array => branch.CaseOfUInt32ArrayAsync(token),
                ORiN3ValueType.Orin3NullableUint32 => branch.CaseOfNullableUInt32Async(token),
                ORiN3ValueType.Orin3NullableUint32Array => branch.CaseOfNullableUInt32ArrayAsync(token),
                ORiN3ValueType.Orin3Uint64 => branch.CaseOfUInt64Async(token),
                ORiN3ValueType.Orin3Uint64Array => branch.CaseOfUInt64ArrayAsync(token),
                ORiN3ValueType.Orin3NullableUint64 => branch.CaseOfNullableUInt64Async(token),
                ORiN3ValueType.Orin3NullableUint64Array => branch.CaseOfNullableUInt64ArrayAsync(token),
                ORiN3ValueType.Orin3Int8 => branch.CaseOfInt8Async(token),
                ORiN3ValueType.Orin3Int8Array => branch.CaseOfInt8ArrayAsync(token),
                ORiN3ValueType.Orin3NullableInt8 => branch.CaseOfNullableInt8Async(token),
                ORiN3ValueType.Orin3NullableInt8Array => branch.CaseOfNullableInt8ArrayAsync(token),
                ORiN3ValueType.Orin3Int16 => branch.CaseOfInt16Async(token),
                ORiN3ValueType.Orin3Int16Array => branch.CaseOfInt16ArrayAsync(token),
                ORiN3ValueType.Orin3NullableInt16 => branch.CaseOfNullableInt16Async(token),
                ORiN3ValueType.Orin3NullableInt16Array => branch.CaseOfNullableInt16ArrayAsync(token),
                ORiN3ValueType.Orin3Int32 => branch.CaseOfInt32Async(token),
                ORiN3ValueType.Orin3Int32Array => branch.CaseOfInt32ArrayAsync(token),
                ORiN3ValueType.Orin3NullableInt32 => branch.CaseOfNullableInt32Async(token),
                ORiN3ValueType.Orin3NullableInt32Array => branch.CaseOfNullableInt32ArrayAsync(token),
                ORiN3ValueType.Orin3Int64 => branch.CaseOfInt64Async(token),
                ORiN3ValueType.Orin3Int64Array => branch.CaseOfInt64ArrayAsync(token),
                ORiN3ValueType.Orin3NullableInt64 => branch.CaseOfNullableInt64Async(token),
                ORiN3ValueType.Orin3NullableInt64Array => branch.CaseOfNullableInt64ArrayAsync(token),
                ORiN3ValueType.Orin3Float => branch.CaseOfFloatAsync(token),
                ORiN3ValueType.Orin3FloatArray => branch.CaseOfFloatArrayAsync(token),
                ORiN3ValueType.Orin3NullableFloat => branch.CaseOfNullableFloatAsync(token),
                ORiN3ValueType.Orin3NullableFloatArray => branch.CaseOfNullableFloatArrayAsync(token),
                ORiN3ValueType.Orin3Double => branch.CaseOfDoubleAsync(token),
                ORiN3ValueType.Orin3DoubleArray => branch.CaseOfDoubleArrayAsync(token),
                ORiN3ValueType.Orin3NullableDouble => branch.CaseOfNullableDoubleAsync(token),
                ORiN3ValueType.Orin3NullableDoubleArray => branch.CaseOfNullableDoubleArrayAsync(token),
                ORiN3ValueType.Orin3String => branch.CaseOfStringAsync(token),
                ORiN3ValueType.Orin3StringArray => branch.CaseOfStringArrayAsync(token),
                ORiN3ValueType.Orin3Datetime => branch.CaseOfDateTimeAsync(token),
                ORiN3ValueType.Orin3DatetimeArray => branch.CaseOfDateTimeArrayAsync(token),
                ORiN3ValueType.Orin3NullableDatetime => branch.CaseOfNullableDateTimeAsync(token),
                ORiN3ValueType.Orin3NullableDatetimeArray => branch.CaseOfNullableDateTimeArrayAsync(token),
                ORiN3ValueType.Orin3Object => branch.CaseOfObjectAsync(token),
                _ => branch.CaseOfErrorAsync(token),
            };
        }
        catch (Exception e)
        {
            throw new TypeSwitcherException(type, e);
        }
    }

    /// <summary>
    /// Execute an action determination by object type.
    /// The action is provided by the branch.
    /// </summary>
    /// <param name="value"></param>
    /// <param name="branch"></param>
    /// <exception cref="ArgumentNullException"></exception>
    /// <exception cref="TypeSwitcherException"></exception>
    public static void Execute(object? value, IValueTypeBranch branch)
    {
        branch = branch ?? throw new ArgumentNullException(nameof(branch));

        if (value == null)
        {
            branch.CaseOfError();
            return;
        }

        var type = value.GetType();
        try
        {
            switch (Type.GetTypeCode(type))
            {
                case TypeCode.Boolean:
                    branch.CaseOfBool();
                    return;
                case TypeCode.Byte:
                    branch.CaseOfUInt8();
                    return;
                case TypeCode.UInt16:
                    branch.CaseOfUInt16();
                    return;
                case TypeCode.UInt32:
                    branch.CaseOfUInt32();
                    return;
                case TypeCode.UInt64:
                    branch.CaseOfUInt64();
                    return;
                case TypeCode.SByte:
                    branch.CaseOfInt8();
                    return;
                case TypeCode.Int16:
                    branch.CaseOfInt16();
                    return;
                case TypeCode.Int32:
                    branch.CaseOfInt32();
                    return;
                case TypeCode.Int64:
                    branch.CaseOfInt64();
                    return;
                case TypeCode.Single:
                    branch.CaseOfFloat();
                    return;
                case TypeCode.Double:
                    branch.CaseOfDouble();
                    return;
                case TypeCode.String:
                    branch.CaseOfString();
                    return;
                case TypeCode.DateTime:
                    branch.CaseOfDateTime();
                    return;
                default:
                    if (type.IsArray)
                    {
                        switch (Type.GetTypeCode(type.GetElementType()))
                        {
                            case TypeCode.Boolean:
                                branch.CaseOfBoolArray();
                                return;
                            case TypeCode.Byte:
                                branch.CaseOfUInt8Array();
                                return;
                            case TypeCode.UInt16:
                                branch.CaseOfUInt16Array();
                                return;
                            case TypeCode.UInt32:
                                branch.CaseOfUInt32Array();
                                return;
                            case TypeCode.UInt64:
                                branch.CaseOfUInt64Array();
                                return;
                            case TypeCode.SByte:
                                branch.CaseOfInt8Array();
                                return;
                            case TypeCode.Int16:
                                branch.CaseOfInt16Array();
                                return;
                            case TypeCode.Int32:
                                branch.CaseOfInt32Array();
                                return;
                            case TypeCode.Int64:
                                branch.CaseOfInt64Array();
                                return;
                            case TypeCode.Single:
                                branch.CaseOfFloatArray();
                                return;
                            case TypeCode.Double:
                                branch.CaseOfDoubleArray();
                                return;
                            case TypeCode.String:
                                branch.CaseOfStringArray();
                                return;
                            case TypeCode.DateTime:
                                branch.CaseOfDateTimeArray();
                                return;
                            case TypeCode.Object:
                                if (type.GetElementType().GenericTypeArguments.Length != 0)
                                {
                                    switch (Type.GetTypeCode(type.GetElementType().GenericTypeArguments[0]))
                                    {
                                        case TypeCode.Boolean:
                                            branch.CaseOfNullableBoolArray();
                                            return;
                                        case TypeCode.Byte:
                                            branch.CaseOfNullableUInt8Array();
                                            return;
                                        case TypeCode.UInt16:
                                            branch.CaseOfNullableUInt16Array();
                                            return;
                                        case TypeCode.UInt32:
                                            branch.CaseOfNullableUInt32Array();
                                            return;
                                        case TypeCode.UInt64:
                                            branch.CaseOfNullableUInt64Array();
                                            return;
                                        case TypeCode.SByte:
                                            branch.CaseOfNullableInt8Array();
                                            return;
                                        case TypeCode.Int16:
                                            branch.CaseOfNullableInt16Array();
                                            return;
                                        case TypeCode.Int32:
                                            branch.CaseOfNullableInt32Array();
                                            return;
                                        case TypeCode.Int64:
                                            branch.CaseOfNullableInt64Array();
                                            return;
                                        case TypeCode.Single:
                                            branch.CaseOfNullableFloatArray();
                                            return;
                                        case TypeCode.Double:
                                            branch.CaseOfNullableDoubleArray();
                                            return;
                                        case TypeCode.DateTime:
                                            branch.CaseOfNullableDateTimeArray();
                                            return;
                                    }
                                }
                                break;
                        }
                    }
                    break;
            }

            branch.CaseOfObject();
        }
        catch (Exception e)
        {
            throw new TypeSwitcherException(type, e);
        }
    }
}
